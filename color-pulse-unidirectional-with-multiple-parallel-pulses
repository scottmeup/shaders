// configurable color pulses

const int size_of_display_in_columns = 10;    // how many parallel pulses to run
const bool direction_movement_horizontal = false;
const bool direction_movement_reversed = false;
const float duration_of_pause = 1.0;   //  Time between the front of the pulse leaving the screen and the next pulse appearing 
const float duration_of_pulse = 3.0;    // Time taken for the front of the pulse to run across the display
const float speed_global_modifier = 1.0;    // When set to 1.0, cycle will play at 1 second per unit of duration

struct Pulse_settings 
{
    float color_brightness_cutoff;    // switch to non-pulse, "pause" section of cycle coloring below this brightness
    bool color_brightness_cutoff_includes_background_brightness;    
    float color_pulse_minimum_brightness_percent;    // Minimum brightness of pulse as a percent.
    bool color_combine_background_with_pause_color;
    float decay_speed_linear;// 0.0 for no linear decay 
    float decay_speed_exponential;    // 0.0 for no exponential decay
    bool display_discrete_led_output; // To-do
    vec3 rgb_background;    // (R, G, B) Color applied uniformly on top of others
    vec3 rgb_pause;     // (R, G, B) Color for negative space: non-pulse area  
    vec3 rgb_pulse;    // (R, G, B) Color for pulse
    float size_pulse_head_in_leds;
    float size_of_display_in_leds;
    float size_of_led_as_percent_of_display;
    float size_of_pulse_head_as_percent_of_display;
    float ratio_of_display_size_to_pulse_tail_size;
};


Pulse_settings initialize_pulse_settings_example(float size_of_display_in_leds){
    // Example method to initialize settings for one column
    Pulse_settings pulse;

    // Begin User Config / Example Settings Section
    pulse.color_brightness_cutoff = 0.03;    // switch to non-pulse, "pause" section of cycle coloring below this brightness
    pulse.color_brightness_cutoff_includes_background_brightness = false;    
    pulse.color_pulse_minimum_brightness_percent = 0.00;    // Minimum brightness of pulse as a percent.
    pulse.color_combine_background_with_pause_color = true;
    pulse.decay_speed_linear = 1.0;    // 0.0 for no linear decay 
    pulse.decay_speed_exponential = 1.0;    // 0.0 for no exponential decay
    pulse.display_discrete_led_output = false; // To-do
    pulse.rgb_background = vec3(0.0, 0.1, 0.2);    // (R, G, B) Color applied uniformly on top of others
    pulse.rgb_pause = vec3(0.0, 0.0, 1.0);     // (R, G, B) Color for negative space: non-pulse area  
    pulse.rgb_pulse = vec3(0.0, 1.0, 0.0);    // (R, G, B) Color for pulse
    pulse.size_pulse_head_in_leds = 1.0;
    pulse.size_of_display_in_leds = size_of_display_in_leds;
    // End User Config / Example Settings Section

    // These will not be recalculated automatically if any of the above pulse settings are altered after creation
    pulse.size_of_led_as_percent_of_display = 1.0 / pulse.size_of_display_in_leds;
    pulse.size_of_pulse_head_as_percent_of_display = pulse.size_of_led_as_percent_of_display * pulse.size_pulse_head_in_leds;
    pulse.ratio_of_display_size_to_pulse_tail_size = 1.0 / (1.0 - pulse.size_of_pulse_head_as_percent_of_display);

    return pulse;
}


vec3 generate_rgb_output_column(Pulse_settings pulse, float distance_of_current_location_from_pulse_as_percent){
    // Draw the current pulse
    vec3 display_output_vector_column;
    if ((distance_of_current_location_from_pulse_as_percent) < pulse.size_of_pulse_head_as_percent_of_display){
        // Pulse Head
        display_output_vector_column = pulse.rgb_pulse;
        }
    else{
        // Pulse Tail
        // Squish the decay rate into the non-head area of the pulse
        float distance_from_pulse_head_percent = (distance_of_current_location_from_pulse_as_percent - pulse.size_of_pulse_head_as_percent_of_display);
        float distance_from_pulse_head_percent_normalised = ( distance_from_pulse_head_percent / pulse.ratio_of_display_size_to_pulse_tail_size );
        float decay_linear = 1.0 - (distance_from_pulse_head_percent_normalised * pulse.decay_speed_linear);        
        float decay_exponential = exp(-distance_from_pulse_head_percent_normalised * pulse.decay_speed_exponential);
        float decay_total = decay_linear * decay_exponential;
        display_output_vector_column = (pulse.rgb_pulse * decay_total);
    }
    

    // enforce minimum brightness setting for pulse - do not decay below this intensity
    vec3 ones3d = vec3(1.0, 1.0, 1.0);
    float color_brightness_of_display_output_vector_mean_percent = dot(ones3d, display_output_vector_column)/3.0;
    
    if( color_brightness_of_display_output_vector_mean_percent < pulse.color_pulse_minimum_brightness_percent){
        float rgb_pulse_brightness_sum = pulse.rgb_pulse.x + pulse.rgb_pulse.y + pulse.rgb_pulse.z;
        vec3 rgb_ratio = vec3((pulse.rgb_pulse.x / rgb_pulse_brightness_sum), (pulse.rgb_pulse.y / rgb_pulse_brightness_sum), (pulse.rgb_pulse.z / rgb_pulse_brightness_sum));
        display_output_vector_column = (rgb_ratio * pulse.color_pulse_minimum_brightness_percent * 3.0);
    }
    

    // Establish cutoff location for pause section coloring
    float color_brightness_intensity;
    if( pulse.color_brightness_cutoff_includes_background_brightness){
        color_brightness_intensity = (dot(ones3d, display_output_vector_column) + dot(ones3d, pulse.rgb_background)) / 3.0;
    }
    else{
        color_brightness_intensity = dot(ones3d, display_output_vector_column) / 3.0;
    }


    // Switch to pause-section coloring when brightness drops off below the set cutoff level
    if (color_brightness_intensity < pulse.color_brightness_cutoff){
         display_output_vector_column = pulse.rgb_pause;
         
         // Add the optional background color
         if(pulse.color_combine_background_with_pause_color){
             display_output_vector_column = display_output_vector_column + pulse.rgb_background;
         }
    }
    // Apply background to pulse section
    else{
        display_output_vector_column = display_output_vector_column + pulse.rgb_background;
    }
    return display_output_vector_column;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Begin User Config / Example Settings Section 
    // Create array with number of parallel pulses
    Pulse_settings pulse[size_of_display_in_columns];

    // Populate first pulse with some test data
    for(int i=0; i<size_of_display_in_columns; i++){
        pulse[i] = initialize_pulse_settings_first(float(i+3));
    }
    // End User Config / Example Settings Section 


    // Adjust the display parameters to suit the direction & size of the display
    // from fragCoord and iResolution 
    float size_display_width_in_pixels;
    float size_display_height_in_pixels;
    float position_current_pixel_x;
    float position_current_pixel_y;
    if (direction_movement_horizontal){
        size_display_width_in_pixels = iResolution.x;
        size_display_height_in_pixels = iResolution.y;
        position_current_pixel_x = fragCoord.x;
        position_current_pixel_y = fragCoord.y;
        }
    else{
        size_display_width_in_pixels = iResolution.y;
        size_display_height_in_pixels = iResolution.x;
        position_current_pixel_x = fragCoord.y;
        position_current_pixel_y = fragCoord.x;   
    }
    

    // Set additional parameters related to display calculation
    float position_of_current_location_x_as_percent_of_display = position_current_pixel_x / size_display_width_in_pixels;
    float duration_of_cycle = duration_of_pause + duration_of_pulse;
    float ratio_of_total_cycle_to_display = duration_of_cycle / duration_of_pulse;
    float speed_of_movement_per_second_as_percent_of_display = 1.0 / duration_of_pulse;

    
    // Move beginning of pulse across the screen and calculate distance from each screen location
    float speed_reverse_modifier = 1.0;
    if(direction_movement_reversed){
        speed_reverse_modifier = -1.0;
    }
    float time = mod(iTime*speed_global_modifier*speed_reverse_modifier, duration_of_cycle);
    float position_of_pulse_as_percent_of_display = speed_of_movement_per_second_as_percent_of_display * time;

    
    // Set up distance from end of pulse head based on normal or reverse direction of movement
    vec3 display_output_vector;
    float distance_of_current_location_from_pulse_as_percent;
    if(direction_movement_reversed){
        distance_of_current_location_from_pulse_as_percent = mod((position_of_current_location_x_as_percent_of_display - position_of_pulse_as_percent_of_display), ratio_of_total_cycle_to_display); // expect this to reach values over 100% if pause time is greater than 0
    }
    else{
        distance_of_current_location_from_pulse_as_percent = mod((position_of_pulse_as_percent_of_display - position_of_current_location_x_as_percent_of_display), ratio_of_total_cycle_to_display); // expect this to reach values over 100% if pause time is greater than 0    
    }
    

    float position_of_current_location_y_as_percent_of_display = (position_current_pixel_y / size_display_height_in_pixels);
    int display_current_pulse = int(floor(position_of_current_location_y_as_percent_of_display * float(size_of_display_in_columns)));
    display_output_vector = generate_rgb_output_column(pulse[display_current_pulse], distance_of_current_location_from_pulse_as_percent);


    // Display final output
    fragColor = vec4(display_output_vector.x, display_output_vector.y, display_output_vector.z, 1.0);
}
